create or replace trigger UPPERPELATISTRIGGER
before INSERT or UPDATE on PELATIS
FOR EACH ROW
BEGIN

:NEW.PID := UPPER( :NEW.PID );
:NEW.LNAME := UPPER( :NEW.LNAME );
:NEW.ARTAYT := UPPER( :NEW.ARTAYT );
:NEW.FNAME := UPPER( :NEW.FNAME );
END;
/
create or replace trigger UPPERAMENITIESTRIGGER
before INSERT or UPDATE on AMENITIES
FOR EACH ROW
BEGIN

:NEW.AMENTYPE := UPPER( :NEW.AMENTYPE );
END;
/
create or replace trigger FUTURETIMETRIGGER
before INSERT or UPDATE on KRATHSH
FOR EACH ROW
DECLARE
FUTURETIMEEXCEPTION EXCEPTION;
BEGIN
IF :NEW.INDATE<=CURRENT_DATE THEN
RAISE FUTURETIMEEXCEPTION;
END IF;
EXCEPTION 
WHEN FUTURETIMEEXCEPTION THEN RAISE_APPLICATION_ERROR(-20003,'Please Input Future Date');
END;
/
create or replace trigger DENYKRATHSHTRIGGER
before INSERT or UPDATE on KRATHSH
FOR EACH ROW
DECLARE
WINTERMONTH EXCEPTION;
BEGIN
IF (EXTRACT(MONTH FROM :NEW.INDATE)) = 12 OR (EXTRACT(MONTH FROM :NEW.INDATE)) = 1 OR (EXTRACT(MONTH FROM :NEW.INDATE)) = 3 THEN
RAISE WINTERMONTH;
END IF;
EXCEPTION 
WHEN WINTERMONTH THEN RAISE_APPLICATION_ERROR(-20003,'Cannot Make a Reservation during Winter');
END;
/
create or replace trigger TABLEBOOKTIMESTRIGGER
before INSERT OR DELETE on KRATHSH
FOR EACH ROW


BEGIN
IF INSERTING THEN 
UPDATE TRAPEZI SET TIMESRESERVED=TIMESRESERVED+1 WHERE
TID= :NEW.TID;
END IF;
IF DELETING THEN
UPDATE TRAPEZI SET TIMESRESERVED=TIMESRESERVED-1 WHERE TID=
:OLD.TID;
END IF;

END;
/
create or replace trigger CATEGORYTABLESCOUNTTRIGGER
before INSERT OR DELETE on TRAPEZI
FOR EACH ROW
DECLARE
CATNOTHERE EXCEPTION;CURSOR cursor1 is (SELECT * FROM KATHGORIES WHERE :NEW.CAT=CAT);
cursorfetch cursor1%rowtype;
BEGIN
open cursor1;fetch cursor1 into cursorfetch;
IF cursor1%FOUND=TRUE THEN CLOSE cursor1;
IF INSERTING THEN 
UPDATE KATHGORIES SET TABLECOUNT=TABLECOUNT+1 WHERE
CAT= :NEW.CAT;
END IF;
IF DELETING THEN
UPDATE KATHGORIES SET TABLECOUNT=TABLECOUNT-1 WHERE CAT=
:OLD.CAT;
END IF;
ELSE RAISE CATNOTHERE;
END IF;
EXCEPTION
WHEN CATNOTHERE THEN 
RAISE_APPLICATION_ERROR(-20003,'CATEGORY DOES NOT EXIST');
END;
/
create or replace trigger RESERVATIONBILLTRIGGER
BEFORE insert OR UPDATE on KRATHSH
FOR EACH ROW
DECLARE
--VAR2 VARCHAR2(55);VAR1 VARCHAR2(55);
--RETVAL NUMBER;
BEGIN
--VAR2:=:NEW.PID;
--VAR1:=:NEW.TID;
SELECT CALCULATEBILL(:NEW.TID,:NEW.PID) into :NEW.BILL FROM DUAL;
DBMS_OUTPUT.put_line('SUCCESS');
end;
/